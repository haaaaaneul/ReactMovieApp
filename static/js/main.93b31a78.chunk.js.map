{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+BA,SAASA,EAATC,GAA8B,IAARC,EAAQD,EAARC,MAClB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,GAIxC,SAASK,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OAEIP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKJ,UAAU,kBAqB3CO,MAxDf,SAAAC,GAAmD,IAAlCF,EAAkCE,EAAlCF,MAAOH,EAA2BK,EAA3BL,OAAQM,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACpC,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAEtCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVS,EAAOE,IAAI,SAACf,EAAOgB,GAAR,OAAkBf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAEjEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACIiB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCmHbC,6MA9HbC,MAAQ,KA6DRC,cAAgB,WAcV,OAbcC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAElC,OADAC,QAAQC,IAAIF,GAEZ5B,EAAAC,EAAAC,cAAC6B,EAAD,CACEtB,MAAOmB,EAAMI,cACb1B,OAAQsB,EAAMK,mBACdjB,IAAKY,EAAMM,GACXtB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAQ1BsB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAGXjB,EAAKkB,SAAS,CACZjB,WAJS,wBAAAY,EAAAM,SAAAT,QAQbM,SAAW,WACV,OAAOI,MACJ,iEAEDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,yFAlC1BC,KAAKlB,8CAsCE,IAGDR,EAAU0B,KAAK7B,MAAfG,OAEN,OASE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAS,MAAQ,gBAC9BA,EAAS0B,KAAK5B,gBAAkB,qBAjHvB6B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.93b31a78.chunk.js","sourcesContent":["import React, { Component  } from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\nfunction Movie ({title, poster, genres, synopsis}) {\r\n    return ( \r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>   \r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nfunction MovieGenre( {genre}) {\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        //alt -> 이미지에 마우스를 가져갔을때(hover) alt가 뜸\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n     //부모 컴포넌트에서 받는 정보의 타입, 있는지 없는지 체크 가능\r\n    title : PropTypes.string.isRequired, //string값을 가져야 한다 ? string만 출력? --> 참이 아니면 오류메세지 출력\r\n    poster : PropTypes.string.isRequired, //isRequired라고 작성하면 movie컴포넌트는 poster라는 prop 제공하는 것이 필수로 설정 됨 --> 참이 아니면 오류 메세지\r\n    genres : PropTypes.array.isRequired,\r\n    synopsis : PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired,\r\n    alt : PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n\n\n\n\nclass App extends Component{\n\n  state = {};\n/*\n  componentWillMount() {\n    console.log('will mount'); //api 작업 요청, 사이클 시작\n  }\n*/\n\n//컴포넌트 안에 state가 바뀔 때 마다, render 작동\n  componentDidMount() {\n  //  console.log('did mount'); //데어터 관련 작업, 컴포넌트 자리잡았음\n    \n    /*time out : 00시간후에 xx작업을 수행시킨다는 뜻\n      fn(function),00초 라고 작성하면 00초 후에 페이지가 로드하고 fn작업이 시작\n    setTimeout(() => { \n      //state는 직접적으로 쓰면 안됨, this.state.~ = ~~ (X) , 직접접으로 변경하면 render 설정들이 작동 안함\n      this.setState({ \n        greeting : 'Hello again' //컴포넌트가 mount 할 때마다, greeting을 Hello --> Hello again으로 변경함 \n        //greeting 렌더링을 setState에서 함\n      })\n    }, 5000)*/\n\n    /*\n    setTimeout(() => {\n      this.setState({\n        movies : [\n  //        ...this.state.movies, // 이전 영화 리스트를 그대로 두고 한개 영화를 추가하라는 뜻임, 이 줄 지우면 오초뒤에 다 사라지고 추가한거만 생김(전체리스트를 대체) \n          \n        {\n          title : \"Marix\",\n          poster : \"https://s3-ap-southeast-2.amazonaws.com/fna-wordpress-website06/wp-content/uploads/2018/09/05151327/Matrix-The-960x1440.jpg\"\n        },\n        {\n          title : \"Full Metal Jacket\",\n          poster : \"https://cdn.shopify.com/s/files/1/0784/1125/products/Full_Metal_Jacket_1024x.jpg?v=1530145558\"   \n        },\n        {\n          title : \"Oldboy\",\n          poster : \"https://upload.wikimedia.org/wikipedia/en/6/67/Oldboykoreanposter.jpg\"\n        },\n        {\n          title : \"Star Wars\",\n          poster : \"https://lumiere-a.akamaihd.net/v1/images/uk_sws-9_teaser-poster_r_b34b20e7.jpeg?region=0,0,960,1420\"\n        }, \n        {\n          title : \"Transpotting\",\n          poster : \"https://lumiere-a.akamaihd.net/v1/images/uk_sws-9_teaser-poster_r_b34b20e7.jpeg?region=0,0,960,1420\"\n        }\n        \n \n      })\n    }, 5000)\n    */\n\n    //컴포넌트가 mount되면 url을 가서 fetch해옴\n    //ajax는 url을 자바스크립트로 asynchronous(비동기화)방법으로 불러옴\n    //fetch, promise를 사용하면 시나리오가 생기고 이를 관리할 수 있음\n    //fetch는 url을 ajax로 불러올 수 있음\n    \n    this._getMovies();\n  }\n\n  _renderMovies = () => { //맵핑 \n      const movies  = this.state.movies.map(movie => { \n          console.log(movie)\n          return (\n          <Movie \n            title={movie.title_english} \n            poster={movie.medium_cover_image} \n            key={movie.id} \n            genres={movie.genres}\n            synopsis={movie.synopsis}\n          />\n          );\n        });\n\n        return movies;\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    //await으로 하는 것은 call api 가능이 끝나는것을 기다리고 return value를 set함\n    this.setState({ //call api 작업이 완료되기 전 까지는 실행되지 X\n      movies \n    }); // state 안에 movies가 있으면, render movies라는 function을 불러 옴 \n  };\n\n  _callApi = () => { //fetch promise를 return\n   return fetch(\n      \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\"\n   )\n    .then(response => response.json()) //fethch의 결과물\n    .then(json => json.data.movies) //return, (=>)는 return 작성할 필요X, 화살표 기능 자체에 return 이라는 뜻이 내재되어 있음\n    .catch(err => console.log(err))\n  };\n\n\n  render() {\n   /* console.log('did render'); //컴포넌트 존재 */\n\n   const {movies} = this.state;\n\n    return (\n      /*\n      <div className=\"App\">\n        {this.state.greeting}\n        {this.state.movies.map((movie, index) => { //리스트\n          return <Movie title={movie.title} poster={movie.poster} key={index}/> //movies array를 가져다가 맵핑해서 새로운 array를 만듬\n        })}\n      </div>\n      */\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : 'Loading...'}\n      </div>\n    );\n\n  }\n}\n\n\n/* Render : componentWillMount() -> render() -> componentDidMount()\n  will mount, render, did mount 3가지는 component가 존재하기 시작할때 작동 함 */\n\n  /* Update : componentWillReceiveProps() -> shouldComponentUpdate() 이전props과 새로운 props가 다르면 == true-> componentWillUpdate() -> render() -> componentDidUpdate()\n  willUpdate()때 spinner(로딩중)를 붙이고 업데이트 이후 DidUpdate()에서 메세지나 아이콘을 숨김 */\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}